<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Hlwang]]></title>
  <subtitle><![CDATA[似山脚达酪迩...]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://kanzhe123.github.io/"/>
  <updated>2015-05-04T08:44:46.092Z</updated>
  <id>http://kanzhe123.github.io/</id>
  
  <author>
    <name><![CDATA[Mr Hlwang]]></name>
    <email><![CDATA[kanzhe123@126.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[互联网思维的“独孤九剑”]]></title>
    <link href="http://kanzhe123.github.io/2015/05/04/InternetThinking/"/>
    <id>http://kanzhe123.github.io/2015/05/04/InternetThinking/</id>
    <published>2015-05-04T08:40:22.000Z</published>
    <updated>2015-05-04T08:40:47.656Z</updated>
    <content type="html"><![CDATA[<p>今天看一个产业有没有潜力，就看它离互联网有多远。能够真正用互联网思维重构的企业，才可能真正赢得未来。这篇文章是目前关于传统企业拥抱互联网最全面的一个总结。你值得一读。</p>
<blockquote>
<p><a href="http://www.cyzone.cn/a/20131025/246434.html" target="_blank" rel="external">互联网思维</a>是相对于工业化思维而言；是一种商业民主化的思维；是一种用户至上的思维；互联网思维下的产品和服务是一个有机的生命体；互联网思维下的产品自带了媒体属性；有互联网思维的企业组织一定是扁平化的</p>
</blockquote>
<p><a id="more"></a><br><strong>课前秀：三个段子</strong></p>
<p>第一个段子：一个毫无餐饮行业经验的人开了一家餐馆，仅两个月时间，就实现了所在商场餐厅坪效第一名;VC投资6000万，估值4亿元人民币，这家餐厅是雕爷牛腩。<br>只有12道菜，花了500万元买断香港食神戴龙牛腩配方;每双筷子都是定制、全新的，吃完饭还可以带回家;老板每天花大量时间盯着针对菜品和服务不满的声音;开业前烧掉1000万搞了半年封测，期间邀请各路明星、达人、微博大号们免费试吃……<br>雕爷牛腩为什么这样安排?背后的逻辑是什么?</p>
<p>我们再看第二个段子：这是一个淘品牌，2012年6月在天猫上线，65天后成为中国网络坚果销售第一;2012年“双十一”创造了日销售766万的奇迹，名列中国电商食品类第一名;2013年1月单月销售额超过2200万;至今一年多时间，累计销售过亿，并再次获得IDG公司600万美元投资。这个品牌是三只松鼠。<br>三只松鼠带有品牌卡通形象的包裹、开箱器、快递大哥寄语、坚果包装袋、封口夹、垃圾袋、传递品牌理念的微杂志、卡通钥匙链，还有湿巾。</p>
<p>一个淘品牌，为什么要煞费苦心地做这些呢?</p>
<p>再看第三个段子：这是一家创业仅三年的企业。2011年销售额5亿元;2012年，销售额达到126亿元;2013上半年销售额达到132.7亿元，预计全年销售可能突破300亿元;在新一轮融资中，估值达100亿美元，位列国内互联网公司第四名。<br>这家企业是小米。雷军说，参与感是小米成功的最大秘密。怎样理解参与感?<br>这三个企业虽然分属不同的行业，但又惊人地相似，我们都称之为互联网品牌。<br>它们背后的互联网思维到底是什么?</p>
<p><strong>互联网思维“独孤九剑”</strong><br>我给互联网思维下了个定义：在(移动)互联网、大数据、云计算等科技不断发展的背景下，对市场、对用户、对产品、对企业价值链乃至对整个商业生态的进行重新审视的思考方式。<br>“独孤九剑”是华山派剑宗风清扬的武林绝学，强调“无招胜有招”，重在剑意，与互联网思维有异曲同工之妙。也意味着互联网思维将像“独孤九剑”破解天下各派武功一样，去重塑及颠覆各类传统行业。<br>我讲一下我所理解的互联网思维体系。</p>
<p><strong>1、用户思维</strong><br>“独孤九剑”第一招是总诀式，第一招学不会，后面的招数就很难领悟。互联网思维也一样。互联网思维，第一个，也是最重要的，就是用户思维。用户思维，是指在价值链各个环节中都要“以用户为中心”去考虑问题。<br>作为厂商，必须从整个价值链的各个环节，建立起“以用户为中心”的企业文化，只有深度理解用户才能生存。没有认同，就没有合同。</p>
<p><strong>这里面有几个法则</strong><br><strong>法则1：得“屌丝”者得天下。</strong><br>成功的互联网产品多抓住了“屌丝群体”、“草根一族”的需求。这是一个人人自称“屌丝”而骨子里认为自己是“高富帅”和“白富美”的时代。当你的产品不 能让用户成为产品的一部分，不能和他们连接在一起，你的产品必然是失败的。QQ、百度、淘宝、微信、YY、小米，无一不是携“屌丝”以成霸业。</p>
<p><strong>法则2：兜售参与感。</strong><br>一种情况是按需定制，厂商提供满足用户个性化需求的产品即可，如海尔的定制化冰箱;另一种情况是在用户的参与中去优化产品，如淘品牌“七格格”，每次的 新品上市，都会把设计的款式放到其管理的粉丝群组里，让粉丝投票，这些粉丝决定了最终的潮流趋势，自然也会为这些产品买单。<br>让用户参与品牌传播，便是粉丝经济。我们的品牌需要的是粉丝，而不只是用户，因为用户远没有粉丝那么忠诚。粉丝是最优质的目标消费者，一旦注入感情因素，有缺陷的产品也会被接受。未来，没有粉丝的品牌都会消亡。<br>电影《小时代》豆瓣评分不到5分，但这个电影观影人群的平均年龄只有22岁，这些粉丝正是郭敬明的富矿。正因为有大量的粉丝“护法”，《小时代1》《小时代2》才创造出累计超过7亿的票房神话。</p>
<p><strong>法则3：体验至上</strong><br>好的用户体验应该从细节开始，并贯穿于每一个细节，能够让用户有所感知，并且这种感知要超出用户预期，给用户带来惊喜，贯穿品牌与消费者沟通的整个链条，说白了，就是让消费者一直爽。微信新版本对公众账号的折叠处理，就是很典型的“用户体验至上”的选择。<br>用户思维体系涵盖了最经典的品牌营销的Who-What-How模型，Who，目标消费者——“屌丝”;What，消费者需求——兜售参与感;How，怎样实现——全程用户体验至上。</p>
<p><strong>2、简约思维</strong><br>互联网时代，信息爆炸，用户的耐心越来越不足，所以，必须在短时间内抓住他!<br>法则4：专注，少即是多<br>苹果就是典型的例子，1997年苹果接近破产，乔帮主回归，砍掉了70%产品线，重点开发4款产品，使得苹果扭亏为盈，起死回生。即使到了5S，iPhone也只有5款。<br>品牌定位也要专注，给消费者一个选择你的理由，一个就足够。<br>最近很火的一个网络鲜花品牌RoseOnly，它的品牌定位是高端人群，买花者需要与收花者身份证号绑定，且每人只能绑定一次，意味着“一生只爱一人”。2013年2月上线，8月份做到了月销售额近1000万元。<br>大道至简，越简单的东西越容易传播，越难做。专注才有力量，才能做到极致。尤其在创业时期，做不到专注，就没有可能生存下去。</p>
<p><strong>法则5：简约即是美</strong><br>在产品设计方面，要做减法。外观要简洁，内在的操作流程要简化。Google首页永远都是清爽的界面，苹果的外观、特斯拉汽车的外观，都是这样的设计。</p>
<p><strong>3、极致思维</strong><br>极致思维，就是把产品、服务和用户体验做到极致，超越用户预期。什么叫极致?极致就是把命都搭上。</p>
<p><strong>法则6：打造让用户尖叫的产品</strong><br>用极限思维打造极致的产品。方法论有三条：第一，“需求要抓得准”(痛点，痒点或兴奋点);第二，“自己要逼得狠”(做到自己能力的极限);第三，“管理要盯得紧”(得产品经理得天下)。一切产业皆媒体，在这个社会化媒体时代，好产品自然会形成口碑传播。<br>尖叫，意味着必须把产品做到极致;极致，就是超越用户想象!</p>
<p><strong>法则7：服务即营销</strong><br>阿芙精油是知名的淘宝品牌，有两个小细节可以看出其对服务体验的极致追求：1)客服24小时轮流上班，使用Thinkpad小红帽笔记本工作，因为使用这种电脑切换窗口更加便捷，可以让消费者少等几秒钟;2)设有“CSO”，即首席惊喜官，每天在用户留言中寻找潜在的推销员或专家，找到之后会给对方寄出包裹，为这个可能的“意见领袖”制造惊喜。<br>海底捞的服务理念受到很多人推崇，但是在互联网思维席卷整个传统行业的浪潮之下，如果海底捞不能用互联网思维重构企业的话，学不会的，可能是海底捞了。</p>
<p><strong>4、迭代思维</strong><br>“敏捷开发”是互联网产品开发的典型方法论，是一种以人为核心、迭代、循序渐进的开发方法，允许有所不足，不断试错，在持续迭代中完善产品。<br>这里面有两个点，一个“微”，一个“快”。</p>
<p><strong>法则8：小处着眼，微创新</strong><br>“微”，要从细微的用户需求入手，贴近用户心理，在用户参与和反馈中逐步改进。“可能你觉得是一个不起眼的点，但是用户可能觉得很重要”。360安全卫士当年只是一个安全防护产品，后来也成了新兴的互联网巨头。<br>法则9：精益创业，快速迭代<br>“天下武功，唯快不破”，只有快速地对消费者需求做出反应，产品才更容易贴近消费者。Zynga游戏公司每周对游戏进行数次更新，小米MIUI系统坚持每周迭代，就连雕爷牛腩的菜单也是每月更新。<br>这里的迭代思维，对传统企业而言，更侧重在迭代的意识，意味着我们必须要及时乃至实时关注消费者需求，把握消费者需求的变化。</p>
<p><strong>5、流量思维</strong><br>流量意味着体量，体量意味着分量。“目光聚集之处，金钱必将追随”，流量即金钱，流量即入口，流量的价值不必多言。</p>
<p><strong>法则10：免费是为了更好地收费</strong><br>互联网产品大多用免费策略极力争取用户、锁定用户。当年的360安全卫士，用免费杀毒入侵杀毒市场，一时间搅的天翻地覆，回头再看看，卡巴斯基、瑞星等杀毒软件，估计没有几台电脑还会装着了。<br>“免费是最昂贵的”，不是所有的企业都能选择免费策略，因产品、资源、时机而定。</p>
<p><strong>法则11：坚持到质变的“临界点”</strong><br>任何一个互联网产品，只要用户活跃数量达到一定程度，就会开始产生质变，从而带来商机或价值。QQ若没有当年的坚持，也不可能有今天的企业帝国。注意力经济时代，先把流量做上去，才有机会思考后面的问题，否则连生存的机会都没有。</p>
<p><strong>6、社会化思维</strong><br>社会化商业的核心是网，公司面对的客户以网的形式存在，这将改变企业生产、销售、营销等整个形态。</p>
<p><strong>法则12：利用好社会化媒体</strong><br>有一个做智能手表的品牌，通过10条微信，近100个微信群讨论，3千多人转发，11小时预订售出18698只T-Watch智能手表，订单金额900多万元。<br>这就是微信朋友圈社会化营销的魅力。有一点要记住，口碑营销不是自说自话，一定是站在用户的角度、以用户的方式和用户沟通。</p>
<p><strong>法则13：众包协作</strong><br>众包是以“蜂群思维”和层级架构为核心的互联网协作模式，维基百科就是典型的众包产品。传统企业要思考如何利用外脑，不用招募，便可“天下贤才入吾彀中”。<br>InnoCentive网站创立于2001年，已经成为化学和生物领域的重要研发供求网络平台。该公司引入“创新中心”的模式，把公司外部的创新比例从原来的15%提高到50%，研发能力提高了60%。<br>小米手机在研发中让用户深度参与，实际上也是一种众包模式。</p>
<p><strong>7、大数据思维</strong><br>大数据思维，是指对大数据的认识，对企业资产、关键竞争要素的理解。</p>
<p><strong>法则14：小企业也要有大数据</strong><br>用户在网络上一般会产生信息、行为、关系三个层面的数据，这些数据的沉淀，有助于企业进行预测和决策。一切皆可被数据化，企业必须构建自己的大数据平台，小企业，也要有大数据。</p>
<p><strong>法则15：你的用户是每个人</strong><br>在互联网和大数据时代，企业的营销策略应该针对个性化用户做精准营销。<br>银泰网上线后，打通了线下实体店和线上的会员账号，在百货和购物中心铺设免费wifi。当一位已注册账号的客人进入实体店，他的手机连接上wifi，他 与银泰的所有互动记录会一一在后台呈现，银泰就能据此判别消费者的购物喜好。这样做的最终目的是实现商品和库存的可视化，并达到与用户之间的沟通。</p>
<p><strong>8、平台思维</strong><br>互联网的平台思维就是开放、共享、共赢的思维。平台模式最有可能成就产业巨头。全球最大的100家企业里，有60家企业的主要收入来自平台商业模式，包括苹果、谷歌等。</p>
<p><strong>法则16：打造多方共赢的生态圈</strong><br>平台模式的精髓，在于打造一个多主体共赢互利的生态圈。<br>将来的平台之争，一定是生态圈之间的竞争。百度、阿里、腾讯三大互联网巨头围绕搜索、电商、社交各自构筑了强大的产业生态，所以后来者如360其实是很难撼动的。</p>
<p><strong>法则17：善用现有平台</strong><br>当你不具备构建生态型平台实力的时候，那就要思考怎样利用现有的平台。<br>马云说：“假设我是90后重新创业，前面有个阿里巴巴，有个腾讯，我不会跟它挑战，心不能太大。”</p>
<p><strong>法则18：让企业成为员工的平台</strong><br>互联网巨头的组织变革，都是围绕着如何打造内部“平台型组织”。<br>包括阿里巴巴25个事业部的分拆、腾讯6大事业群的调整，都旨在发挥内部组织的平台化作用。海尔将8万多人分为2000个自主经营体，让员工成为真正的“创业者”，让每个人成为自己的CEO。<br>内部平台化就是要变成自组织而不是他组织。他组织永远听命于别人，自组织是自己来创新。</p>
<p><strong>9、跨界思维</strong><br>(随着)互联网和新科技的发展，很多产业的边界变得模糊，互联网企业的触角已无孔不入，(如)零售、图书、金融、电信、娱乐、交通、媒体等等。</p>
<p><strong>法则19：携“用户”以令诸侯</strong><br>这些互联网企业，为什么能够参与乃至赢得跨界竞争?答案就是：用户!<br>他们掌握着一方面掌握用户数据，另一方面又具备用户思维，自然能够携“用户”以令诸侯。阿里巴巴、腾讯相继申办银行，小米做手机、做电视，都是这样的道理。<br>未来十年，是中国商业领域大规模打劫的时代，一旦用户的生活方式发生根本性的变化，来不及变革的企业，必定遭遇劫数!<br>所以，最后一个法则：用互联网思维，大胆颠覆式创新。<br>一个真正牛逼的人一定是一个跨界的人，能够同时在科技和人文的交汇点上找到自己的坐标。一个真正厉害的企业，一定是手握用户和数据资源，敢于跨界创新的组织。<br>李彦宏指出：“互联网产业最大的机会在于发挥自身的网络优势、技术优势、管理优势等，去提升、改造线下的传统产业，改变原有的产业发展节奏、建立起新的游戏规则。</p>
<p><strong>以上便是我总结的互联网思维“独孤九剑”。</strong><br>今天看一个产业有没有潜力，就看它离互联网有多远。能够真正用互联网思维重构的企业，才可能真正赢得未来。<br>美图秀秀蔡文胜说：未来属于那些传统产业里懂互联网的人，而不是那些懂互联网但不懂传统产业的人。<br>金山网络傅盛说：产业机会属于敢于用互联网向传统行业发起进攻的互联网人。<br>我们认为，未来一定是属于既能深刻理解传统商业的本质，也具有互联网思维的人。不管你是来自传统行业还是互联网领域。未来一定属于这种O2O“两栖人才”。</p>
<p>来自：《华哥自话》(微信公共账号：billcui007)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天看一个产业有没有潜力，就看它离互联网有多远。能够真正用互联网思维重构的企业，才可能真正赢得未来。这篇文章是目前关于传统企业拥抱互联网最全面的一个总结。你值得一读。</p>
<blockquote>
<p><a href="http://www.cyzone.cn/a/20131025/246434.html" target="_blank" rel="external">互联网思维</a>是相对于工业化思维而言；是一种商业民主化的思维；是一种用户至上的思维；互联网思维下的产品和服务是一个有机的生命体；互联网思维下的产品自带了媒体属性；有互联网思维的企业组织一定是扁平化的</p>
</blockquote>
<p>]]>
    
    </summary>
    
      <category term="互联网思维" scheme="http://kanzhe123.github.io/tags/%E4%BA%92%E8%81%94%E7%BD%91%E6%80%9D%E7%BB%B4/"/>
    
      <category term="技术类" scheme="http://kanzhe123.github.io/categories/%E6%8A%80%E6%9C%AF%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Js实现组合键功能]]></title>
    <link href="http://kanzhe123.github.io/2015/04/15/KeyCombination/"/>
    <id>http://kanzhe123.github.io/2015/04/15/KeyCombination/</id>
    <published>2015-04-15T01:32:43.000Z</published>
    <updated>2015-04-15T01:52:58.362Z</updated>
    <content type="html"><![CDATA[<p>你可以通过js事件的event对象的keyCode获得按键对应key值，keyCode会返回一个按键代码，但是对于ctrl这类修饰健，event有另外的方法去判断是否同时按下了修饰键。例如Ctrl键可以通过 event.ctrlKey 方法获取，返回true或false。<br><a id="more"></a></p>
<h2 id="写个实例">写个实例</h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//监听Ctrl+Q组合键</span></div><div class="line">$(<span class="built_in">document</span>).ready(  </div><div class="line">    <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{  </div><div class="line">        <span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span><span class="params">()</span>  </span></div><div class="line">        {  </div><div class="line">            <span class="keyword">var</span> oEvent = <span class="built_in">window</span>.event;  </div><div class="line">            <span class="keyword">if</span> (oEvent.keyCode == <span class="number">81</span> && oEvent.ctrlKey) {  </div><div class="line">                alert(<span class="string">"你按下了ctrl+enter"</span>);  </div><div class="line">            }  </div><div class="line">        }  </div><div class="line">    }  </div><div class="line">);</div></pre></td></tr></table></figure>

<h2 id="附上event事件">附上event事件</h2>
<p><img src="http://i2.tietuku.com/8eb4656c233e7da8.png" alt="KeyboardEvent"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>你可以通过js事件的event对象的keyCode获得按键对应key值，keyCode会返回一个按键代码，但是对于ctrl这类修饰健，event有另外的方法去判断是否同时按下了修饰键。例如Ctrl键可以通过 event.ctrlKey 方法获取，返回true或false。<br>]]>
    
    </summary>
    
      <category term="javascript" scheme="http://kanzhe123.github.io/tags/javascript/"/>
    
      <category term="keycode" scheme="http://kanzhe123.github.io/tags/keycode/"/>
    
      <category term="技术类" scheme="http://kanzhe123.github.io/categories/%E6%8A%80%E6%9C%AF%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《看见》语录]]></title>
    <link href="http://kanzhe123.github.io/2015/04/07/see/"/>
    <id>http://kanzhe123.github.io/2015/04/07/see/</id>
    <published>2015-04-07T11:10:25.000Z</published>
    <updated>2015-04-08T10:32:47.672Z</updated>
    <content type="html"><![CDATA[<p>当一个人关心别人的时候才会忘记自己。</p>
<p>人们还能笑的时候是最不容易被打败的.</p>
<p>你问一个问题的是时候，你期待答案吗？你要不期待就别问了。</p>
<a id="more"></a>

<p>体制里的工作我干不了！</p>
<p>有意瞄准，无意击发！</p>
<p>人们声称的最美好的岁月其实都是最痛苦的，只是事后回忆起来的时候才那么的幸福！</p>
<p>你的生活太熟料了，不真实！</p>
<p>黎明刚起，巨大的原野一片青黑，赤红的火苗一蹿一蹿舔着锅底！</p>
<p>王小波说过:你在家里， 在单位，在认识的人面前，你被当成一个人看，你被尊重，但在一个没人认识你的地方，你可能会被当成东西对待。</p>
<p>我想在任何地方都被当成人，不是东西，这就是尊严！</p>
<p>庐山烟雨浙江潮，未到千般恨不消。到得还来别无事，庐山烟雨浙江潮。</p>
<p>当她们认为你也是在为了生存挣扎的时候，咱们就是平等的了！</p>
<p>人是这样的，对幸福的愿望一样，对自身完整的需求一样，只是她生活在这儿，这么活着，我来到那儿，那么活着，都是偶然！</p>
<p>认识自己越深，认识他人越深，反之亦然！</p>
<p>自卑的极端是自负！</p>
<p>天空一无所有，为何给我安慰！</p>
<p>去他妈的，我总算试过了，起码我试过了！</p>
<p>痛苦是财富，这话是扯淡，伙计，痛苦就是痛苦，对痛苦的思考才是财富！</p>
<p>江湖的事不是非要人性命不可，你能不能先看一看，闻一闻，听一听水声，让镜头里的气淌一淌，再问？望闻问切…</p>
<p>雨过地皮湿，没渗入土壤，也不触及根须，龟裂土地上，再强烈的震慑稍后就不见踪影…也就那么回事！</p>
<p>这个世界上没有好人和坏人，只有做了好事的人和做了坏事的人！</p>
<p>过去你觉得只有好人坏人，现在只有好事坏事，将来只有有事无事！</p>
<p>念起即觉，觉即不随！</p>
<p>亲近的人之间，一旦触及自尊心就会尖锐起来，绝不低头。</p>
<p>你问一个问题的是时候，你期待答案吗？你要不期待就别问了。</p>
<p>我问路卢安克：“我怎么老没办法改变我的弱点？”<br>他说：“如果那么容易的话，还要这么漫长的人生干什么呢？”</p>
<p>批评你不可怕，对你失望才可怕。</p>
<p>有些笑容背后是紧咬牙关的灵魂。</p>
<p>不惹眼，不闹腾，也不勉强自己，要做个落后于时代的人，凝视人心。</p>
<p>只有同样经历过无边黑暗的人，才有资格说，我理解你。</p>
<p>强大的人不是征服什么，而是能承受什么。</p>
<p>我问张北川：“我们的社会为什么不接受同性恋者？” 他说：“因为我们的性文化里，把生育当作性的目的，把无知当纯洁，把愚昧当德行，把偏见当原则。”</p>
<p>不管任何人，你去告诉别人应该怎么样，这就是错的方式。</p>
<p>理解的基础是感受。人能感受别人的时候，心就变软了，软不是脆弱，是韧性。</p>
<p>我们都不完美，但我愿为你作出不可能的改善。</p>
<p>看这个人的眼睛，就知道真不真诚。</p>
<p>对遭受的侮辱，不需要愤怒，也不需要还击，只需要蔑视。</p>
<p>人性是这样，光靠自己靠不住。</p>
<p>“你有什么心里话跟谁说？”<br>“不说。”<br>“那你碰到难受的事怎么办？”<br>“忍着。”</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>当一个人关心别人的时候才会忘记自己。</p>
<p>人们还能笑的时候是最不容易被打败的.</p>
<p>你问一个问题的是时候，你期待答案吗？你要不期待就别问了。</p>
]]>
    
    </summary>
    
      <category term="读书" scheme="http://kanzhe123.github.io/tags/%E8%AF%BB%E4%B9%A6/"/>
    
      <category term="生活类" scheme="http://kanzhe123.github.io/categories/%E7%94%9F%E6%B4%BB%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript设计模式——观察者模式]]></title>
    <link href="http://kanzhe123.github.io/2015/04/03/Observer/"/>
    <id>http://kanzhe123.github.io/2015/04/03/Observer/</id>
    <published>2015-04-03T06:40:37.000Z</published>
    <updated>2015-04-03T06:51:37.437Z</updated>
    <content type="html"><![CDATA[<p>观察者模式又叫发布订阅模式（Publish/Subscribe），它定义了一种一对多的关系，让多个观察者对象同时监听某一个主题对象，这个主题对象的状态发生变化时就会通知所有的观察者对象，使得它们能够自动更新自己。</p>
<p>使用观察者模式的好处：</p>
<p>支持简单的广播通信，自动通知所有已经订阅过的对象。<br>页面载入后目标对象很容易与观察者存在一种动态关联，增加了灵活性。<br>目标对象与观察者之间的抽象耦合关系能够单独扩展以及重用。</p>
<a id="more"></a>

<p>JS里对观察者模式的实现是通过回调来实现的，我们来先定义一个pubsub对象，其内部包含了3个方法：订阅、退订、发布。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> pubsub = {};</div><div class="line">(<span class="function"><span class="keyword">function</span> <span class="params">(q)</span> </span>{</div><div class="line"></div><div class="line">    <span class="keyword">var</span> topics = {}, <span class="comment">// 回调函数存放的数组</span></div><div class="line">        subUid = -<span class="number">1</span>;</div><div class="line">    <span class="comment">// 发布方法</span></div><div class="line">    q.publish = <span class="function"><span class="keyword">function</span> <span class="params">(topic, args)</span> </span>{</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!topics[topic]) {</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        }</div><div class="line"></div><div class="line">        setTimeout(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">            <span class="keyword">var</span> subscribers = topics[topic],</div><div class="line">                len = subscribers ? subscribers.length : <span class="number">0</span>;</div><div class="line"></div><div class="line">            <span class="keyword">while</span> (len--) {</div><div class="line">                subscribers[len].func(topic, args);</div><div class="line">            }</div><div class="line">        }, <span class="number">0</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line"></div><div class="line">    };</div><div class="line">    <span class="comment">//订阅方法</span></div><div class="line">    q.subscribe = <span class="function"><span class="keyword">function</span> <span class="params">(topic, func)</span> </span>{</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!topics[topic]) {</div><div class="line">            topics[topic] = [];</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="keyword">var</span> token = (++subUid).toString();</div><div class="line">        topics[topic].push({</div><div class="line">            token: token,</div><div class="line">            func: func</div><div class="line">        });</div><div class="line">        <span class="keyword">return</span> token;</div><div class="line">    };</div><div class="line">    <span class="comment">//退订方法</span></div><div class="line">    q.unsubscribe = <span class="function"><span class="keyword">function</span> <span class="params">(token)</span> </span>{</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> m <span class="keyword">in</span> topics) {</div><div class="line">            <span class="keyword">if</span> (topics[m]) {</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, j = topics[m].length; i &lt; j; i++) {</div><div class="line">                    <span class="keyword">if</span> (topics[m][i].token === token) {</div><div class="line">                        topics[m].splice(i, <span class="number">1</span>);</div><div class="line">                        <span class="keyword">return</span> token;</div><div class="line">                    }</div><div class="line">                }</div><div class="line">            }</div><div class="line">        }</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    };</div><div class="line">} (pubsub));</div></pre></td></tr></table></figure>

<p>//将订阅赋值给一个变量，以便退订</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> testSubscription = pubsub.subscribe(<span class="string">'example1'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(topics, data)</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log(topics + <span class="string">": "</span> + data);</div><div class="line">});</div><div class="line"></div><div class="line"><span class="comment">//发布通知</span></div><div class="line">pubsub.publish(<span class="string">'example1'</span>, <span class="string">'hello world!'</span>);</div><div class="line">pubsub.publish(<span class="string">'example1'</span>, [<span class="string">'test'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]);</div><div class="line">pubsub.publish(<span class="string">'example1'</span>, [{ <span class="string">'color'</span>: <span class="string">'blue'</span> }, { <span class="string">'text'</span>: <span class="string">'hello'</span>}]);</div><div class="line"></div><div class="line"><span class="comment">//退订</span></div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">    pubsub.unsubscribe(testSubscription);</div><div class="line">}, <span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="comment">//再发布一次，验证一下是否还能够输出信息</span></div><div class="line">pubsub.publish(<span class="string">'example1'</span>, <span class="string">'hello again! (this will fail)'</span>);</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p>观察者模式又叫发布订阅模式（Publish/Subscribe），它定义了一种一对多的关系，让多个观察者对象同时监听某一个主题对象，这个主题对象的状态发生变化时就会通知所有的观察者对象，使得它们能够自动更新自己。</p>
<p>使用观察者模式的好处：</p>
<p>支持简单的广播通信，自动通知所有已经订阅过的对象。<br>页面载入后目标对象很容易与观察者存在一种动态关联，增加了灵活性。<br>目标对象与观察者之间的抽象耦合关系能够单独扩展以及重用。</p>
]]>
    
    </summary>
    
      <category term="javascript" scheme="http://kanzhe123.github.io/tags/javascript/"/>
    
      <category term="设计模式" scheme="http://kanzhe123.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="观察者模式" scheme="http://kanzhe123.github.io/tags/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="技术类" scheme="http://kanzhe123.github.io/categories/%E6%8A%80%E6%9C%AF%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript设计模式——组合模式]]></title>
    <link href="http://kanzhe123.github.io/2015/04/02/Composite/"/>
    <id>http://kanzhe123.github.io/2015/04/02/Composite/</id>
    <published>2015-04-02T14:35:53.000Z</published>
    <updated>2015-04-03T06:57:06.771Z</updated>
    <content type="html"><![CDATA[<p>组合模式（Composite）将对象组合成树形结构以表示“部分-整体”的层次结构，组合模式使得用户对单个对象和组合对象的使用具有一致性。</p>
<p>组合模式的使用场景：</p>
<p>你想表示对象的部分-整体层次结构时；<br>你希望用户忽略组合对象和单个对象的不同，用户将统一地使用组合结构中的所有对象（方法）<br>另外该模式经常和装饰者一起使用，它们通常有一个公共的父类（也就是原型），因此装饰必须支持具有add、remove、getChild操作的 component接口。<br><a id="more"></a></p>
<h2 id="案例走起：">案例走起：</h2>
<p>有家餐厅提供了各种各样的菜品，每个餐桌都有一本菜单，菜单上列出了该餐厅所偶的菜品，有早餐糕点、午餐、晚餐等等，每个餐都有各种各样的菜单项，假设不管是菜单项还是整个菜单都应该是可以打印的，而且可以添加子项，比如午餐可以添加新菜品，而菜单项咖啡也可以添加糖啊什么的。<br><strong>第一步，先实现我们的“抽象类”函数MenuComponent：</strong><br>（该函数提供了2种类型的方法，一种是获取信息的，比如价格，名称等，另外一种是通用操作方法，比如打印、添加、删除、获取子菜单。）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> MenuComponent = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">};</div><div class="line">MenuComponent.prototype.getName = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"该方法必须重写!"</span>);</div><div class="line">};</div><div class="line">MenuComponent.prototype.getDescription = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"该方法必须重写!"</span>);</div><div class="line">};</div><div class="line">MenuComponent.prototype.getPrice = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"该方法必须重写!"</span>);</div><div class="line">};</div><div class="line">MenuComponent.prototype.isVegetarian = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"该方法必须重写!"</span>);</div><div class="line">};</div><div class="line">MenuComponent.prototype.print = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"该方法必须重写!"</span>);</div><div class="line">};</div><div class="line">MenuComponent.prototype.add = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"该方法必须重写!"</span>);</div><div class="line">};</div><div class="line">MenuComponent.prototype.remove = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"该方法必须重写!"</span>);</div><div class="line">};</div><div class="line">MenuComponent.prototype.getChild = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"该方法必须重写!"</span>);</div><div class="line">};</div></pre></td></tr></table></figure>

<p><strong>第二步，创建基本的菜品项：</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> MenuItem = <span class="function"><span class="keyword">function</span> <span class="params">(sName, sDescription, bVegetarian, nPrice)</span> </span>{</div><div class="line">    MenuComponent.apply(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">this</span>.sName = sName;</div><div class="line">    <span class="keyword">this</span>.sDescription = sDescription;</div><div class="line">    <span class="keyword">this</span>.bVegetarian = bVegetarian;</div><div class="line">    <span class="keyword">this</span>.nPrice = nPrice;</div><div class="line">};</div><div class="line">MenuItem.prototype = <span class="keyword">new</span> MenuComponent();</div><div class="line">MenuItem.prototype.getName = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.sName;</div><div class="line">};</div><div class="line">MenuItem.prototype.getDescription = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.sDescription;</div><div class="line">};</div><div class="line">MenuItem.prototype.getPrice = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.nPrice;</div><div class="line">};</div><div class="line">MenuItem.prototype.isVegetarian = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.bVegetarian;</div><div class="line">};</div><div class="line">MenuItem.prototype.print = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.getName() + <span class="string">": "</span> + <span class="keyword">this</span>.getDescription() + <span class="string">", "</span> + <span class="keyword">this</span>.getPrice() + <span class="string">"euros"</span>);</div><div class="line">};</div></pre></td></tr></table></figure>

<p>由代码可以看出，我们只重新了原型的4个获取信息的方法和print方法，没有重载其它3个操作方法，因为基本菜品不包含添加、删除、获取子菜品的方式。</p>
<p><strong>第三步，创建菜品：</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Menu = <span class="function"><span class="keyword">function</span> <span class="params">(sName, sDescription)</span> </span>{</div><div class="line">    MenuComponent.apply(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">this</span>.aMenuComponents = [];</div><div class="line">    <span class="keyword">this</span>.sName = sName;</div><div class="line">    <span class="keyword">this</span>.sDescription = sDescription;</div><div class="line">    <span class="keyword">this</span>.createIterator = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"This method must be overwritten!"</span>);</div><div class="line">    };</div><div class="line">};</div><div class="line">Menu.prototype = <span class="keyword">new</span> MenuComponent();</div><div class="line">Menu.prototype.add = <span class="function"><span class="keyword">function</span> <span class="params">(oMenuComponent)</span> </span>{</div><div class="line">    <span class="comment">// 添加子菜品</span></div><div class="line">    <span class="keyword">this</span>.aMenuComponents.push(oMenuComponent);</div><div class="line">};</div><div class="line">Menu.prototype.remove = <span class="function"><span class="keyword">function</span> <span class="params">(oMenuComponent)</span> </span>{</div><div class="line">    <span class="comment">// 删除子菜品</span></div><div class="line">    <span class="keyword">var</span> aMenuItems = [];</div><div class="line">    <span class="keyword">var</span> nMenuItem = <span class="number">0</span>;</div><div class="line">    <span class="keyword">var</span> nLenMenuItems = <span class="keyword">this</span>.aMenuComponents.length;</div><div class="line">    <span class="keyword">var</span> oItem = <span class="literal">null</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (; nMenuItem &lt; nLenMenuItems; ) {</div><div class="line">        oItem = <span class="keyword">this</span>.aMenuComponents[nMenuItem];</div><div class="line">        <span class="keyword">if</span> (oItem !== oMenuComponent) {</div><div class="line">            aMenuItems.push(oItem);</div><div class="line">        }</div><div class="line">        nMenuItem = nMenuItem + <span class="number">1</span>;</div><div class="line">    }</div><div class="line">    <span class="keyword">this</span>.aMenuComponents = aMenuItems;</div><div class="line">};</div><div class="line">Menu.prototype.getChild = <span class="function"><span class="keyword">function</span> <span class="params">(nIndex)</span> </span>{</div><div class="line">    <span class="comment">//获取指定的子菜品</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.aMenuComponents[nIndex];</div><div class="line">};</div><div class="line">Menu.prototype.getName = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.sName;</div><div class="line">};</div><div class="line">Menu.prototype.getDescription = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.sDescription;</div><div class="line">};</div><div class="line">Menu.prototype.print = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">    <span class="comment">// 打印当前菜品以及所有的子菜品</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.getName() + <span class="string">": "</span> + <span class="keyword">this</span>.getDescription());</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"--------------------------------------------"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">var</span> nMenuComponent = <span class="number">0</span>;</div><div class="line">    <span class="keyword">var</span> nLenMenuComponents = <span class="keyword">this</span>.aMenuComponents.length;</div><div class="line">    <span class="keyword">var</span> oMenuComponent = <span class="literal">null</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (; nMenuComponent &lt; nLenMenuComponents; ) {</div><div class="line">        oMenuComponent = <span class="keyword">this</span>.aMenuComponents[nMenuComponent];</div><div class="line">        oMenuComponent.print();</div><div class="line">        nMenuComponent = nMenuComponent + <span class="number">1</span>;</div><div class="line">    }</div><div class="line">};</div></pre></td></tr></table></figure>

<p>注意上述代码，除了实现了添加、删除、获取方法外，打印print方法是首先打印当前菜品信息，然后循环遍历打印所有子菜品信息。</p>
<p><strong>第四步，创建指定的菜品：</strong></p>
<p>我们可以创建几个真实的菜品，比如晚餐、咖啡、糕点等等，其都是用Menu作为其原型，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> DinnerMenu = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">    Menu.apply(<span class="keyword">this</span>);</div><div class="line">};</div><div class="line">DinnerMenu.prototype = <span class="keyword">new</span> Menu();</div><div class="line"></div><div class="line"><span class="keyword">var</span> CafeMenu = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">    Menu.apply(<span class="keyword">this</span>);</div><div class="line">};</div><div class="line">CafeMenu.prototype = <span class="keyword">new</span> Menu();</div><div class="line"></div><div class="line"><span class="keyword">var</span> PancakeHouseMenu = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">    Menu.apply(<span class="keyword">this</span>);</div><div class="line">};</div><div class="line">PancakeHouseMenu.prototype = <span class="keyword">new</span> Menu();</div></pre></td></tr></table></figure>

<p><strong>第五步，创建最顶级的菜单容器——菜单本：</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Mattress = <span class="function"><span class="keyword">function</span> <span class="params">(aMenus)</span> </span>{</div><div class="line">    <span class="keyword">this</span>.aMenus = aMenus;</div><div class="line">};</div><div class="line">Mattress.prototype.printMenu = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">this</span>.aMenus.print();</div><div class="line">};</div></pre></td></tr></table></figure>

<p>该函数接收一个菜单数组作为参数，并且值提供了printMenu方法用于打印所有的菜单内容。</p>
<p><strong>第六步，调用方式：</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> oPanCakeHouseMenu = <span class="keyword">new</span> Menu(<span class="string">"Pancake House Menu"</span>, <span class="string">"Breakfast"</span>);</div><div class="line"><span class="keyword">var</span> oDinnerMenu = <span class="keyword">new</span> Menu(<span class="string">"Dinner Menu"</span>, <span class="string">"Lunch"</span>);</div><div class="line"><span class="keyword">var</span> oCoffeeMenu = <span class="keyword">new</span> Menu(<span class="string">"Cafe Menu"</span>, <span class="string">"Dinner"</span>);</div><div class="line"><span class="keyword">var</span> oAllMenus = <span class="keyword">new</span> Menu(<span class="string">"ALL MENUS"</span>, <span class="string">"All menus combined"</span>);</div><div class="line"></div><div class="line">oAllMenus.add(oPanCakeHouseMenu);</div><div class="line">oAllMenus.add(oDinnerMenu);</div><div class="line"></div><div class="line">oDinnerMenu.add(<span class="keyword">new</span> MenuItem(<span class="string">"Pasta"</span>, <span class="string">"Spaghetti with Marinara Sauce, and a slice of sourdough bread"</span>, <span class="literal">true</span>, <span class="number">3.89</span>));</div><div class="line">oDinnerMenu.add(oCoffeeMenu);</div><div class="line"></div><div class="line">oCoffeeMenu.add(<span class="keyword">new</span> MenuItem(<span class="string">"Express"</span>, <span class="string">"Coffee from machine"</span>, <span class="literal">false</span>, <span class="number">0.99</span>));</div><div class="line"></div><div class="line"><span class="keyword">var</span> oMattress = <span class="keyword">new</span> Mattress(oAllMenus);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"---------------------------------------------"</span>);</div><div class="line">oMattress.printMenu();</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"---------------------------------------------"</span>);</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p>组合模式（Composite）将对象组合成树形结构以表示“部分-整体”的层次结构，组合模式使得用户对单个对象和组合对象的使用具有一致性。</p>
<p>组合模式的使用场景：</p>
<p>你想表示对象的部分-整体层次结构时；<br>你希望用户忽略组合对象和单个对象的不同，用户将统一地使用组合结构中的所有对象（方法）<br>另外该模式经常和装饰者一起使用，它们通常有一个公共的父类（也就是原型），因此装饰必须支持具有add、remove、getChild操作的 component接口。<br>]]>
    
    </summary>
    
      <category term="javascript" scheme="http://kanzhe123.github.io/tags/javascript/"/>
    
      <category term="设计模式" scheme="http://kanzhe123.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="组合模式" scheme="http://kanzhe123.github.io/tags/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="技术类" scheme="http://kanzhe123.github.io/categories/%E6%8A%80%E6%9C%AF%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript设计模式——工厂模式]]></title>
    <link href="http://kanzhe123.github.io/2015/03/30/factory/"/>
    <id>http://kanzhe123.github.io/2015/03/30/factory/</id>
    <published>2015-03-30T11:51:17.000Z</published>
    <updated>2015-04-03T06:46:37.406Z</updated>
    <content type="html"><![CDATA[<p>与创建型模式类似，工厂模式创建对象（视为工厂里的产品）时无需指定创建对象的具体类。</p>
<p>工厂模式定义一个用于创建对象的接口，这个接口由子类决定实例化哪一个类。该模式使一个类的实例化延迟到了子类。而子类可以重写接口方法以便创建的时候指定自己的对象类型。</p>
<p>这个模式十分有用，尤其是创建对象的流程赋值的时候，比如依赖于很多设置文件等。并且，你会经常在程序里看到工厂方法，用于让子类类定义需要创建的对象类型。<br><a id="more"></a></p>
<h2 id="实例">实例</h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> page = page || {};</div><div class="line">page.dom = page.dom || {};</div><div class="line"><span class="comment">//子函数1：处理文本</span></div><div class="line">page.dom.Text = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">this</span>.insert = <span class="function"><span class="keyword">function</span> <span class="params">(where)</span> </span>{</div><div class="line">        <span class="keyword">var</span> txt = <span class="built_in">document</span>.createTextNode(<span class="keyword">this</span>.url);</div><div class="line">        where.appendChild(txt);</div><div class="line">    };</div><div class="line">};</div><div class="line"></div><div class="line"><span class="comment">//子函数2：处理链接</span></div><div class="line">page.dom.Link = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">this</span>.insert = <span class="function"><span class="keyword">function</span> <span class="params">(where)</span> </span>{</div><div class="line">        <span class="keyword">var</span> link = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</div><div class="line">        link.href = <span class="keyword">this</span>.url;</div><div class="line">        link.appendChild(<span class="built_in">document</span>.createTextNode(<span class="keyword">this</span>.url));</div><div class="line">        where.appendChild(link);</div><div class="line">    };</div><div class="line">};</div><div class="line"></div><div class="line"><span class="comment">//子函数3：处理图片</span></div><div class="line">page.dom.Image = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">this</span>.insert = <span class="function"><span class="keyword">function</span> <span class="params">(where)</span> </span>{</div><div class="line">        <span class="keyword">var</span> im = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</div><div class="line">        im.src = <span class="keyword">this</span>.url;</div><div class="line">        where.appendChild(im);</div><div class="line">    };</div><div class="line">};</div></pre></td></tr></table></figure>

<p>那么我们如何定义工厂处理函数呢？其实很简单：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">page.dom.factory = <span class="function"><span class="keyword">function</span> <span class="params">(type)</span> </span>{</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> page.dom[type];</div><div class="line">}</div></pre></td></tr></table></figure>

<p>使用方式如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o = page.dom.factory(<span class="string">'Link'</span>);</div><div class="line">o.url = <span class="string">'http://www.cnblogs.com'</span>;</div><div class="line">o.insert(<span class="built_in">document</span>.body);</div></pre></td></tr></table></figure>

<h2 id="总结：">总结：</h2>
<p><strong>什么时候使用工厂模式</strong></p>
<p>以下几种情景下工厂模式特别有用：</p>
<p>对象的构建十分复杂<br>需要依赖具体环境创建不同实例<br>处理大量具有相同属性的小对象</p>
<p><strong>什么时候不该用工厂模式</strong></p>
<p>不滥用运用工厂模式，有时候仅仅只是给代码增加了不必要的复杂度，同时使得测试难以运行下去。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>与创建型模式类似，工厂模式创建对象（视为工厂里的产品）时无需指定创建对象的具体类。</p>
<p>工厂模式定义一个用于创建对象的接口，这个接口由子类决定实例化哪一个类。该模式使一个类的实例化延迟到了子类。而子类可以重写接口方法以便创建的时候指定自己的对象类型。</p>
<p>这个模式十分有用，尤其是创建对象的流程赋值的时候，比如依赖于很多设置文件等。并且，你会经常在程序里看到工厂方法，用于让子类类定义需要创建的对象类型。<br>]]>
    
    </summary>
    
      <category term="javascript" scheme="http://kanzhe123.github.io/tags/javascript/"/>
    
      <category term="设计模式" scheme="http://kanzhe123.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="工厂模式" scheme="http://kanzhe123.github.io/tags/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="技术类" scheme="http://kanzhe123.github.io/categories/%E6%8A%80%E6%9C%AF%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript设计模式——建造者模式]]></title>
    <link href="http://kanzhe123.github.io/2015/03/29/BuilderPattern/"/>
    <id>http://kanzhe123.github.io/2015/03/29/BuilderPattern/</id>
    <published>2015-03-29T13:40:25.000Z</published>
    <updated>2015-03-30T11:54:07.639Z</updated>
    <content type="html"><![CDATA[<p>建造者模式可以将一个复杂对象的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。也就是说如果我们用了建造者模式，那么用户就需要指定需要建造的类型就可以得到它们，而具体建造的过程和细节就不需要知道了…<br><a id="more"></a></p>
<h2 id="实例">实例</h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getBeerById</span><span class="params">(id, callback)</span> </span>{</div><div class="line">    <span class="comment">// 使用ID来请求数据，然后返回数据.</span></div><div class="line">    asyncRequest(<span class="string">'GET'</span>, <span class="string">'beer.uri?id='</span> + id, <span class="function"><span class="keyword">function</span> <span class="params">(resp)</span> </span>{</div><div class="line">        <span class="comment">// callback调用 response</span></div><div class="line">        callback(resp.responseText);</div><div class="line">    });</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">var</span> el = <span class="built_in">document</span>.querySelector(<span class="string">'#test'</span>);</div><div class="line">el.addEventListener(<span class="string">'click'</span>, getBeerByIdBridge, <span class="literal">false</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBeerByIdBridge</span><span class="params">(e)</span> </span>{</div><div class="line">    getBeerById(<span class="keyword">this</span>.id, <span class="function"><span class="keyword">function</span> <span class="params">(beer)</span> </span>{</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Requested Beer: '</span> + beer);</div><div class="line">    });</div><div class="line">}</div></pre></td></tr></table></figure>

<p>根据建造者的定义，表相即是回调，也就是说获取数据以后如何显示和处理取决于回调函数，相应地回调函数在处理数据的时候不需要关注是如何获取数据的，同样的例子也可以在jquery的ajax方法里看到，有很多回调函数（比如success, error回调等），主要目的就是职责分离。<br><strong>总结</strong>：建造者模式主要用于“分步骤构建一个复杂的对象”，在这其中“分步骤”是一个稳定的算法，而复杂对象的各个部分则经常变化，其优点是：建造者模式的“加工工艺”是暴露的，这样使得建造者模式更加灵活，并且建造者模式解耦了组装过程和创建具体部件，使得我们不用去关心每个部件是如何组装的。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>建造者模式可以将一个复杂对象的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。也就是说如果我们用了建造者模式，那么用户就需要指定需要建造的类型就可以得到它们，而具体建造的过程和细节就不需要知道了…<br>]]>
    
    </summary>
    
      <category term="javascript" scheme="http://kanzhe123.github.io/tags/javascript/"/>
    
      <category term="设计模式" scheme="http://kanzhe123.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="技术类" scheme="http://kanzhe123.github.io/categories/%E6%8A%80%E6%9C%AF%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript设计模式——构造函数模式]]></title>
    <link href="http://kanzhe123.github.io/2015/03/28/constructed/"/>
    <id>http://kanzhe123.github.io/2015/03/28/constructed/</id>
    <published>2015-03-28T14:25:53.000Z</published>
    <updated>2015-03-30T11:54:09.137Z</updated>
    <content type="html"><![CDATA[<p>构造函数用于创建特定类型的对象——不仅声明了使用的对象，构造函数还可以接受参数以便第一次创建对象的时候设置对象的成员值。你可以自定义自己的构造函数，然后在里面声明自定义类型对象的属性或方法。<br><a id="more"></a></p>
<h2 id="实例">实例</h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span><span class="params">(model, year, miles)</span> </span>{</div><div class="line">    <span class="keyword">this</span>.model = model;</div><div class="line">    <span class="keyword">this</span>.year = year;</div><div class="line">    <span class="keyword">this</span>.miles = miles;</div><div class="line">    <span class="keyword">this</span>.output: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'hello world'</span>);</div><div class="line">    }</div><div class="line">    <span class="comment">//首先是使用继承很麻烦了，其次output()在每次创建对象的时候都重新定义了，最好的方法是让所有Car类型的实例都共享这个output()方法，这样如果有大批量的实例的话，就会节约很多内存。(建议使用原型链)</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">注意：这里我们使用了Object.prototype.方法名，而不是Object.prototype</div><div class="line">主要是用来避免重写定义原型prototype对象</div><div class="line">*/</div><div class="line">Car.prototype.output= <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.model + <span class="string">"走了"</span> + <span class="keyword">this</span>.miles + <span class="string">"公里"</span>;</div><div class="line">};</div><div class="line"></div><div class="line"><span class="keyword">var</span> tom = <span class="keyword">new</span> Car(<span class="string">"大叔"</span>, <span class="number">2009</span>, <span class="number">20000</span>);</div><div class="line"><span class="keyword">var</span> dudu = <span class="keyword">new</span> Car(<span class="string">"Dudu"</span>, <span class="number">2010</span>, <span class="number">5000</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(tom.output());</div><div class="line"><span class="built_in">console</span>.log(dudu.output());</div></pre></td></tr></table></figure>

<p>注：如果不适用new直接调用函数的话，this指向的是全局对象window（可以使用typeof验证）</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>构造函数用于创建特定类型的对象——不仅声明了使用的对象，构造函数还可以接受参数以便第一次创建对象的时候设置对象的成员值。你可以自定义自己的构造函数，然后在里面声明自定义类型对象的属性或方法。<br>]]>
    
    </summary>
    
      <category term="javascript" scheme="http://kanzhe123.github.io/tags/javascript/"/>
    
      <category term="设计模式" scheme="http://kanzhe123.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="技术类" scheme="http://kanzhe123.github.io/categories/%E6%8A%80%E6%9C%AF%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript设计模式——单例模式]]></title>
    <link href="http://kanzhe123.github.io/2015/03/28/Singleton/"/>
    <id>http://kanzhe123.github.io/2015/03/28/Singleton/</id>
    <published>2015-03-28T13:40:53.000Z</published>
    <updated>2015-03-30T08:09:05.150Z</updated>
    <content type="html"><![CDATA[<p>单例就是保证一个类只有一个实例，实现的方法一般是先判断实例存在与否，如果存在直接返回，如果不存在就创建了再返回，这就确保了一个类只有一个实例对象。在JavaScript里，单例作为一个命名空间提供者，从全局命名空间里提供一个唯一的访问点来访问该对象。单例一般是用在系统间各种模式的通信协调上;<br><a id="more"></a></p>
<h2 id="实例">实例</h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Singleton = (<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> instantiated;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">init</span><span class="params">()</span> </span>{</div><div class="line">        <span class="comment">/*这里定义单例代码*/</span></div><div class="line">        <span class="keyword">return</span> {</div><div class="line">            publicMethod: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">            	privteMethod();</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'hello world'</span>);</div><div class="line">            },</div><div class="line">            publicProperty: <span class="string">'test'</span></div><div class="line">        };</div><div class="line">    }</div><div class="line"></div><div class="line">	<span class="comment">/*私有方法*/</span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">privteMethod</span><span class="params">()</span></span>{</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">"this is a privteMethod!"</span>);</div><div class="line">	}</div><div class="line"></div><div class="line">    <span class="keyword">return</span> {</div><div class="line">        getInstance: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">            <span class="keyword">if</span> (!instantiated) {</div><div class="line">                instantiated = init();</div><div class="line">            }</div><div class="line">            <span class="keyword">return</span> instantiated;</div><div class="line">        }</div><div class="line">    };</div><div class="line">})();</div><div class="line"></div><div class="line"><span class="comment">/*调用公有的方法来获取实例:*/</span></div><div class="line">Singleton.getInstance().publicMethod();</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p>单例就是保证一个类只有一个实例，实现的方法一般是先判断实例存在与否，如果存在直接返回，如果不存在就创建了再返回，这就确保了一个类只有一个实例对象。在JavaScript里，单例作为一个命名空间提供者，从全局命名空间里提供一个唯一的访问点来访问该对象。单例一般是用在系统间各种模式的通信协调上;<br>]]>
    
    </summary>
    
      <category term="javascript" scheme="http://kanzhe123.github.io/tags/javascript/"/>
    
      <category term="设计模式" scheme="http://kanzhe123.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="技术类" scheme="http://kanzhe123.github.io/categories/%E6%8A%80%E6%9C%AF%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[前端开发面试知识点总结]]></title>
    <link href="http://kanzhe123.github.io/2015/03/21/interview/"/>
    <id>http://kanzhe123.github.io/2015/03/21/interview/</id>
    <published>2015-03-21T06:40:25.000Z</published>
    <updated>2015-03-26T03:27:08.508Z</updated>
    <content type="html"><![CDATA[<h1 id="前端开发面试知识点大纲："><em>前端开发面试知识点大纲：</em></h1>
<blockquote>
<p><strong>HTML&amp;CSS：</strong>  对Web标准的理解、浏览器内核差异、兼容性、hack、CSS基本功：布局、盒子模型、选择器优先级及使用、HTML5、CSS3、移动端适应。<br><strong>JavaScript：</strong>   数据类型、面向对象、继承、闭包、插件、作用域、跨域、原型链、模块化、自定义事件、内存泄漏、事件机制、异步装载回调、模板引擎、Nodejs、JSON、ajax等。<br><strong>其他：</strong>  HTTP、安全、正则、优化、重构、响应式、移动端、团队协作、可维护、SEO、UED、架构、职业生涯 </p>
</blockquote>
<a id="more"></a>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="前端开发面试知识点大纲："><em>前端开发面试知识点大纲：</em></h1>
<blockquote>
<p><strong>HTML&amp;CSS：</strong>  对Web标准的理解、浏览器内核差异、兼容性、hack、CSS基本功：布局、盒子模型、选择器优先级及使用、HTML5、CSS3、移动端适应。<br><strong>JavaScript：</strong>   数据类型、面向对象、继承、闭包、插件、作用域、跨域、原型链、模块化、自定义事件、内存泄漏、事件机制、异步装载回调、模板引擎、Nodejs、JSON、ajax等。<br><strong>其他：</strong>  HTTP、安全、正则、优化、重构、响应式、移动端、团队协作、可维护、SEO、UED、架构、职业生涯 </p>
</blockquote>
]]>
    
    </summary>
    
      <category term="面试" scheme="http://kanzhe123.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="工作" scheme="http://kanzhe123.github.io/tags/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="工作" scheme="http://kanzhe123.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[不错的文章，有横扫千军感觉]]></title>
    <link href="http://kanzhe123.github.io/2015/03/10/reprint%20/"/>
    <id>http://kanzhe123.github.io/2015/03/10/reprint /</id>
    <published>2015-03-10T02:40:53.000Z</published>
    <updated>2015-03-30T11:49:59.804Z</updated>
    <content type="html"><![CDATA[<p>原文转载与 <strong>下雪了</strong> <a href="http://www.ailingfei.com/index.php/archives/20.html#comment-12" target="_blank" rel="external">你以为自己很屌，其实是你圈子弱，平台低，对手挫！</a> </p>
<blockquote>
<p>郭德纲说：“不是自己多有本事，主要是同行的衬托。”</p>
</blockquote>
<p><strong> 如果哪天我们发现我是我们所在圈子里面最优秀的了，一方面可能是我们自己确实给力，另一方面，也是很有可能的情况，就是我们的圈子太弱了，我们的环境充满了弱者，我们的对手也都很挫。</strong></p>
<p><a id="more"></a><br>Managershare：让比你弱，比你小，比你低的人点赞不叫本事，让比你强，比你长，比你高的人点赞才算英雄。在自己固有的范围杰出不算杰出，真正的杰出，往往是超越自己的固有范围和层次的。</p>
<p>某高富帅对我说他最近身边好多美女备胎，有些甚至是有夫之妇，平时总会约她出来吃吃喝喝甚至别的。他觉得他的魅力好大。我好奇问：“你是这些美女圈子里面最高富帅的一个?”他说：“认识啊，我当然不是。”我又问：“那约你出来的都是良家妇女?”他说：“不，都是水性杨花的。”<br>我说：“那问题很清楚了，不是你魅力大，只是你够不值钱而已。”他不解。我补充：“好人家的姑娘不理你，一帮绿茶联系你。你以为你受欢迎，实际上你只是不值钱。谁都会挑选自己认为不值钱的人随意玩弄。你不该沾沾自喜，而是反思为什么你身边聚集了这么多贱人，以及为什么贱人就敢挑逗你。”他漠然，拉黑了几个人。</p>
<p>一个妹妹对我讲，觉得身边的人都比不上她，她现在没有了前进的动力，觉得不需要再努力了。我说：“你现在多牛?”她说我现在班级第一，学生会部长，英语雅思也考了6.5分。觉得没什么可努力的。</p>
<p>我很无奈说：“孩子你说你学校一般，做个鸡头就值得你骄傲了?学生会部长那又是多大个‘官’，食堂吃饭给优惠不?至于雅思6.5，我要是分数这么低都不好意思跟别人说。你竟然拿来炫耀!”她不服：“哥，我已经是我们班最优秀的好么?”我答：“好啊，只可惜社会上不仅是你们班同学。”她不做声，剑桥雅思真题去了。<br>在英国时候认识一个朋友，平时在中国城打黑工。每次见到他都会跟我讲自己又买了某某打折的Armani Jeans 等等。觉得自己现在很成功，跟我讲老家的人都不如他。我问那你平时都干什么呢?有学些东西读读书吗?他说没有啊，不需要学了，已经这么行了。<br>我说：“哥，你哪么行了?跟你比的都是些什么人?一帮打黑工的厨子就让你飘飘然了?”他说也不是，跟家里人比也很好了。我补刀：“如果你一定要把你的一生定位在厨子或者农民，我们也没什么好聊的了。你之所以现在天下无敌，就是因为你的天下只有一个巴掌大。”他想想说：“老弟你说的对。”现在他的小买卖做的风生水起。</p>
<p><strong>如果哪天我们发现我是我们所在圈子里面最优秀的了，一方面可能是我们自己确实给力，另一方面，也是很有可能的情况，就是我们的圈子太弱了，我们的环境充满了弱者，我们的对手也都很挫。</strong><br>“”我们被称为高富帅或者白富美的时候，不是我们真的“高富帅”了或者“白富美”了，只是真正的高富帅和白富美都不带我们玩而已。<br>因为在他们看来我们太弱了，即便在很多更弱的人眼中我们已经是个牛人。而最最可怕的在于，我们经常竟然会因为比我们更弱的人的几个点赞和掌声，竟然自以为是起来，沾沾自喜起来。不是说挂了先锋官的大印我们就是一代名将，赵云有赵云的圈子，廖化有廖化的圈子。<br>很久以前我觉得有自己如何厉害的感觉。后来慢慢发现，很多时候我们觉得自牛的不得了的时候，很有可能恰恰是我们弱的时候，因为不是我们牛，只是我们的竞争对手弱。而为什么我们竞争对手弱?就是因为我们弱，所以落到一个弱的平台，所以这个平台上争来争去的对手也都很弱。<br>你在中超称王称霸不等于你足球水平多高，因为没有一个西甲意甲球员跟你在这里抢球铲射的;你在CBA全明星拿个得分王也不值得你睥睨世界，今年快四十岁的卡特依旧不会正眼瞧你;就算你Ko了泰拳之王，WWE你可能还是会被分分钟秒杀。<br>在一个三本学校里面学术大牛，但是到了名校或许就是小巫见大巫;在一个投行拿着高额工资，到了对冲基金圈就泯然众人;在一个小城市呼风唤雨的土豪，到了京沪基本上就毫无存在感了。所以每当我们自觉“无敌于天下”的时候，何不反思一下：可能，不是我多有本事，而是我本事不够。自己没足够本事又因为自己在一个巴掌大的小圈子称王称霸而沾沾自喜进而更没本事。用郭德纲的话说：“不是自己多有本事，主要是同行的衬托。”<br><strong>越是牛人，越容易意识到自己渺小。</strong><br>人的眼界是个螺旋。你的眼界越大螺旋越大，你意识到的外围就越大，就越意识到自己的不足。高中毕业觉得自己可以“建功立业”，本科毕业觉得自己可以“一番事业”，硕士毕业觉得自己可以“成家立业”，博士毕业觉得自己“难得毕业”。<br>中国经济学祖师陈岱孙先生说“自己一生只做了一件事，就是教书。”陈道明也从来反复强调自己就是一个“普普通通的戏子”。前几天网上和一位已经在美国顶尖名校读博士的清华特等奖学金的大神聊天。他已经是我们同学中公认的学术大神了，但是他越发觉得自己差的太多了。当我们称呼他为“大师”的时候，他回答只有：“慢慢做吧，希望会有进步。”<br><strong>越是平台高，越容易意识到自己不足。</strong><br>当我们处在一个高手如云的环境中，总有一圈强者将我们的弱小比照的淋漓尽致。“蓬生麻中，不扶而直”，即便你想沾沾自喜，大神的光芒照耀下你都不得不老实巴交，谦卑内敛。反倒是“山中无老虎”的小荒丘，容易让不懂朝三暮四为何物的猴子称了霸王。<br>总能看到一些小县城的土豪们及其孩子们开着宝马撞人，称王称霸;反倒北京真企业家和二代开着兰博基尼遵守交通法规老老实实。毕竟，没见过真佛的香客，对个算命郎中都会毕恭毕敬，何况跟身边更俗的人相比自己还有几分仙气呢，还不跋扈飞扬起来。<br><strong>越是对手强，越容易意识到自己危险。</strong><br>武林高手从来作揖从来都是拳头对着自己，因为高手都明白“天外有天，人外有人”。你死我活的竞争丛林中，活下来的都是知道看淡浮华和虚心努力的高手，因为不懂看淡浮华和虚心努力的都死了。不是上帝让犹太人注定多聪明，只是当了千年巴比伦之囚的流浪民族，不经营智慧就会被消灭殆尽。<br>一个学渣很渣不可怕，怕就怕跟他竞争的人更渣，反衬出他倒是一个学霸，其结局必挂;一个小老板吃喝嫖赌不务正业不恐怖，怕就怕跟他竞争的老板更吃喝嫖赌，反衬出他倒是一个兢兢业业的企业家，结局必惨。<br>当我们发现身边人都比我们强的时候，我们很可能在进步;当我们发现身边人都和我们差不多的时候，我们很可能在原地踏步;当我们发现身边人都不如我们的时候，我们很可能在退步。<br>当我们发现这个圈子里我已经天下无敌了，说明你的圈子已经不能支撑你的进一步发展了，如果你还在这个圈子，只能说明你实力至此。与其满足于低圈层目光的毕恭毕敬，不如拼入高圈层感受冷嘲热讽。毕竟，你今天的拥有的“毕恭毕敬”也都是当年的“冷嘲热讽”换来的。<br>每当我们因为自己的一些或大或小成绩而欢乐开怀的时候，不妨提醒一下自己，或许这个成绩是无数比我们更杰出的人都不屑一顾的，之所以我们会因为这个成绩而得意，不是因为成绩多么瞩目，而是我们没有资格取得更高的成就。<br>我们之所以在某方面的某一段时间看似“独步天下”，不是因为我们实力绝对值多强，只是真正的牛人在忙碌更高端大气上档次的事情，或者真正的牛人正聚集在一个还需要我们努力很久才能企及的平台之上。<br>例如不是说我微积分考了一百分就是我数学牛，那是因为数理大神的同学是不会跟我学一样的数学的;也不是说我bonus在部门里最高我就业务能力最好的trader，那是因为业界高手早就自己搞对冲基金当老板了。<br>当然，取得成绩，不管大小，开心一下是必须的。只是如果我们追求进步却一劳永逸，心怀梦想却自以为是，就不太好了。昨天我们淘汰掉的人，明天可能就会淘汰我们。<br>当我们停留在自以为是的功劳簿上吆五喝六的时候，比我们强的人正在飞黄腾达;和我们差不多的人正在孜孜不倦;比我们差的人正在呼啸而来。我们那块定格成就的金牌上，最好有一个闹钟滴答作响。每当我们在功劳簿上睡的不省人事的时候，那个闹钟都会雷贯双耳，提醒我们：<strong>不是你多猛，只是平台冷;不是你多阔，只是对手弱。</strong><br>另外，每个人都有一个人生态度，每个人都有一种生活方式。如果追求恬淡从容，自不必说，小富即安，豁达通融即可。这个世界并不需要每个人都火力全开，奋勇向前，社会本就不该人人都孜孜不倦，恰如庄子说：“吾生也有涯，而知也无涯。以有涯随无涯，殆已!”<br>所以在一些小处开开心心，从容一生也是不错的选择。只是，对于立志在某些方面成就一番的人来说，自得于成绩，安逸于现状便是不太好了。因为我们可能会把我们的“成绩”当回事，但是我们的榜样和对手不会。<br>如果我们希望更牛，拥有更多资源，做出更多社会贡献，我们不需要盯着被人认可，多少人鼓掌，而是要在奋斗的过程中，看看那些我们希望认同自己的人，希望给我们鼓掌的人。<br>因为被人认可很容易，关键的是被谁认可;多少人为我们鼓掌不重要，重要的是谁给我们鼓掌。让比你弱，比你小，比你低的人点赞不叫本事，让比你强，比你长，比你高的人点赞才算英雄。在自己固有的范围杰出不算杰出，真正的杰出，往往是超越自己的固有范围和层次的。<br>总之，取得再高成就，没必要得意忘形，一方面我们可能并没有在足够高的平台打拼，一方面真正的高手可能都不屑于做我们的对手。我们需要做的不是挂着金匾洋洋自得，敲锣打鼓，而是微微一笑，再攀高峰。<br>下次，就是下次，在我们取得另一个高峰成绩的时候，我们完全可以告诉自己：<strong>“我很不错，但是我完全可以匹配上更高的成就。”</strong></p>
<h1 id="#">#</h1>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文转载与 <strong>下雪了</strong> <a href="http://www.ailingfei.com/index.php/archives/20.html#comment-12" target="_blank" rel="external">你以为自己很屌，其实是你圈子弱，平台低，对手挫！</a> </p>
<blockquote>
<p>郭德纲说：“不是自己多有本事，主要是同行的衬托。”</p>
</blockquote>
<p><strong> 如果哪天我们发现我是我们所在圈子里面最优秀的了，一方面可能是我们自己确实给力，另一方面，也是很有可能的情况，就是我们的圈子太弱了，我们的环境充满了弱者，我们的对手也都很挫。</strong></p>
<p>]]>
    
    </summary>
    
      <category term="文章" scheme="http://kanzhe123.github.io/tags/%E6%96%87%E7%AB%A0/"/>
    
      <category term="转载" scheme="http://kanzhe123.github.io/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="生活类" scheme="http://kanzhe123.github.io/categories/%E7%94%9F%E6%B4%BB%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[新的一年（2015年）]]></title>
    <link href="http://kanzhe123.github.io/2015/01/18/target/"/>
    <id>http://kanzhe123.github.io/2015/01/18/target/</id>
    <published>2015-01-18T10:11:25.000Z</published>
    <updated>2015-03-21T06:23:26.543Z</updated>
    <content type="html"><![CDATA[<h1 id="2014~2015"><strong>2014~2015</strong></h1>
<p><img src="http://ww4.sinaimg.cn/large/005yyi5Jjw1eoduu103imj30j50d6dhh.jpg" alt="2014~2015"><br>2014已经走了有一段时间了，以前都没有怎么总结、规划过，过的浑浑噩噩的；那就从现在开始吧…<br>好像到了一年的结尾大家都会对自己过去的一年做一些回顾或总结，问问自己这一年都做了什么？收获了什么？是否达到你设定的目标？对于过去的一年你是否满意……..<br><a id="more"></a></p>
<h2 id="“回顾2014”">“回顾2014”</h2>
<p>“收获”、”责任”、”迷茫”,2014年六个字应该差不多了吧!</p>
<p><strong>收获</strong>：买了房子、谈了恋爱、有了正式的工作…<br><strong>责任</strong>：房贷、工作、学习、家人…<br><strong>迷茫</strong>：感觉现在的生活不是自己想要的，工作过于单调，不想就这样过完人生的头三十年…</p>
<h2 id="“2015年需要做的事”">“2015年需要做的事”</h2>
<ul>
<li>上半年把车学了</li>
<li>工作中要积极主动，学习、交流、问…</li>
<li>坚持晚上睡觉前读书，即使现在没有这样的好习惯：习惯的力量、自控力、深入浅出Node.js（后续会更新）</li>
<li>寻找自己的价值所在，规划一下自我；</li>
<li>照顾好我爱、爱我的人、强健体魄…</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="2014~2015"><strong>2014~2015</strong></h1>
<p><img src="http://ww4.sinaimg.cn/large/005yyi5Jjw1eoduu103imj30j50d6dhh.jpg" alt="2014~2015"><br>2014已经走了有一段时间了，以前都没有怎么总结、规划过，过的浑浑噩噩的；那就从现在开始吧…<br>好像到了一年的结尾大家都会对自己过去的一年做一些回顾或总结，问问自己这一年都做了什么？收获了什么？是否达到你设定的目标？对于过去的一年你是否满意……..<br>]]>
    
    </summary>
    
      <category term="规划" scheme="http://kanzhe123.github.io/tags/%E8%A7%84%E5%88%92/"/>
    
      <category term="闲扯" scheme="http://kanzhe123.github.io/tags/%E9%97%B2%E6%89%AF/"/>
    
      <category term="生活类" scheme="http://kanzhe123.github.io/categories/%E7%94%9F%E6%B4%BB%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://kanzhe123.github.io/2015/01/06/hello-world/"/>
    <id>http://kanzhe123.github.io/2015/01/06/hello-world/</id>
    <published>2015-01-06T07:44:53.000Z</published>
    <updated>2015-01-06T07:57:11.460Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">trobuleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2>
<h3 id="Create_a_new_post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>

<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a><br><a id="more"></a></p>
<h3 id="Run_server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>

<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>

<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>

<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">trobuleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2>
<h3 id="Create_a_new_post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>

<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a><br>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://kanzhe123.github.io/tags/hexo/"/>
    
      <category term="技术类" scheme="http://kanzhe123.github.io/categories/%E6%8A%80%E6%9C%AF%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[黑客哦（Hexo）--创建个人博客]]></title>
    <link href="http://kanzhe123.github.io/2015/01/06/HexoCreate/"/>
    <id>http://kanzhe123.github.io/2015/01/06/HexoCreate/</id>
    <published>2015-01-06T07:44:53.000Z</published>
    <updated>2015-03-26T03:27:44.273Z</updated>
    <content type="html"><![CDATA[<h1 id="hexo是什么"><strong>hexo是什么</strong></h1>
<p><a href="http://hexo.io/" target="_blank" rel="external">hexo</a>是一个基于<a href="http://nodejs.org/" target="_blank" rel="external">Node.js</a>的静态博客程序，可以方便的生成静态网页托管在<a href="https://github.com/" target="_blank" rel="external">github</a>和<a href="https://www.heroku.com/" target="_blank" rel="external">Heroku</a>上。作者是来自台湾的<a href="https://github.com/hexojs/hexo" target="_blank" rel="external">@tommy351</a>。引用<a href="https://github.com/hexojs/hexo" target="_blank" rel="external">@tommy351</a>的话，hexo：</p>
<blockquote>
<p><strong>快速、简单且功能强大的 Node.js 博客框架。</strong><br>A fast, simple &amp; powerful blog framework, powered by Node.js.</p>
</blockquote>
<p>类似于Octopress、Wordpress，我们可以用<a href="http://hexo.io/" target="_blank" rel="external">hexo</a>创建自己的博客，托管到<a href="https://github.com/" target="_blank" rel="external">github</a>上，然后绑定自己的域名，用<a href="http://mahua.jser.me/" target="_blank" rel="external">markdown</a>写文章。本博客即使用hexo创建并托管在<a href="https://github.com/" target="_blank" rel="external">github</a>上。</p>
<a id="more"></a>

<h1 id="hexo的优势在哪里"><strong>hexo的优势在哪里</strong></h1>
<p>话不多说，还是看看作者自己怎么说的：</p>
<blockquote>
<p>不可思议的快速 ─ 只要一眨眼静态文件即生成完成<br>支持 Markdown<br>仅需一道指令即可部署到 GitHub Pages 和 Heroku<br>已移植 Octopress 插件<br>高扩展性、自订性<br>兼容于 Windows, Mac &amp; Linux</p>
</blockquote>
<p>我再模仿一二</p>
<ul>
<li>易用。不仅部署简单，平时使用中仅需要<code>hexo new</code> <code>hexo generate</code> <code>hexo server</code> <code>hexo deploy</code>四个命令。不像Jekyll需要很多繁琐的git命令。</li>
<li>轻。文件少、小，易理解，方便自定义（之前有用过Wordpress上次文件都要老久，不过Wordpress还是很强大的，我用的不行只能这么解释）。</li>
<li>用的多。虽然赶不上Jekyll和Octopress，但遇到什么问题都能搜索到答案，或者找到同样使用hexo的用户进行参考和咨询(只要你想的到的问题网上都有，就怕你想不到)。</li>
<li>第一眼就相中她了。</li>
</ul>
<h1 id="前期准备工作"><strong>前期准备工作</strong></h1>
<p><code>注</code>：本文只是介绍Windows下hexo博客的搭建流程，至于软件安装什么的这里就不详细说明了</p>
<h2 id="依次下载软件安装。">依次下载软件安装。</h2>
<ul>
<li>在 Windows 环境下安装 Node.js 非常简单，仅须<a href="http://nodejs.org/" target="_blank" rel="external">Node.js</a>安装文件并执行即可完成安装。</li>
<li>下载 <a href="http://code.google.com/p/msysgit/" target="_blank" rel="external">msysgit </a> 并执行即可完成安装。</li>
</ul>
<h2 id="注册一个github帐号：http://www-github-com/">注册一个github帐号：<a href="http://www.github.com/" target="_blank" rel="external">http://www.github.com/</a></h2>
<ul>
<li>注册推荐一个：<a href="http://www.pchou.info/web-build/2013/01/03/build-github-blog-page-01.html" target="_blank" rel="external">一步步在GitHub上创建博客主页 全系列</a> by pchou</li>
<li>配置和使用来一个：<a href="http://beiyuu.com/github-pages/" target="_blank" rel="external">《使用Github Pages建独立博客》</a> by pchou</li>
</ul>
<h2 id="获取SSH_keys并添加到GitHub上">获取SSH keys并添加到GitHub上</h2>
<p>我们如何让本地git项目与远程的github建立联系呢？用SSH keys。</p>
<ul>
<li>检查SSH keys的设置<br> 首先我们需要检查你电脑上现有的ssh key：</li>
</ul>
<figure class="highlight code"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> ~/.ssh 检查本机的ssh密钥</div></pre></td></tr></table></figure>

<p>如果提示：<code>No such file or directory</code> 说明你是第一次使用git。</p>
<ul>
<li>生成新的SSH Key：</li>
</ul>
<figure class="highlight code"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C <span class="string">"邮件地址@youremail.com"</span></div><div class="line">Generating <span class="keyword">public</span>/<span class="keyword">private</span> rsa <span class="keyword">key</span> pair.</div><div class="line">Enter file <span class="keyword">in</span> which <span class="keyword">to</span> save the <span class="keyword">key</span> (/Users/your_user_directory/.ssh/id_rsa):&lt;回车就好&gt;</div></pre></td></tr></table></figure>

<p><code>注意</code>: 此处的邮箱地址，你可以输入自己的邮箱地址；注意2: 此处的「-C」的是大写的「C」然后系统会要你输入密码：</p>
<figure class="highlight code"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="constant">Enter</span> passphrase (empty <span class="keyword">for</span> no passphrase)<span class="symbol">:&lt;</span>输入加密串&gt;</div><div class="line"><span class="constant">Enter</span> same passphrase <span class="symbol">again:</span>&lt;再次输入加密串&gt;</div></pre></td></tr></table></figure>

<p>注意：在回车中会提示你输入一个密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入<code>个人觉得没有必要输入对于开发个人博客来说，避免了繁琐的操作</code>。这个设置是防止别人往你的项目里提交内容。输入密码的时候没有*字样的，你直接输入就可以了。</p>
<ul>
<li>最后看到这样的界面，就成功设置ssh key了(盗用了@cnfeat的图片)：<br><img src="http://cnfeat.qiniudn.com/11.png" alt="SSH keys" title="SSH keys"></li>
</ul>
<h2 id="添加SSH_Key到GitHub">添加SSH Key到GitHub</h2>
<p>在本机设置SSH Key之后，需要添加到GitHub上，以完成SSH链接的设置。</p>
<ul>
<li>打开本地C:\Users\hlwang.ssh\id_rsa.pub文件(在第三步设置密码后就不在这个目录下了，原因还不大清楚)。此文件里面内容为刚才生成人密钥。如果看不到这个文件，你需要设置显示隐藏文件。准确的复制这个文件的内容，才能保证设置的成功。</li>
<li>登陆github系统。点击右上角的 Account Settings—-&gt;SSH Public keys —-&gt; add another public keys</li>
<li>把你本地生成的密钥复制到里面（key文本框中）， 点击 add key 就ok了<br><img src="http://cnfeat.qiniudn.com/s12.jpg" alt="ADD SSH keys" title="ADD SSH keys"></li>
</ul>
<h2 id="测试">测试</h2>
<p>可以输入下面的命令，看看设置是否成功，git@github.com的部分不要修改：</p>
<figure class="highlight code"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>ssh -<span class="constant">T</span> git<span class="variable">@github</span>.com</div></pre></td></tr></table></figure>

<p><code>注</code>:本人尝试多次都验证失败，但是居然不影响代码上传，郁闷…<br>如果是下面的反馈：</p>
<figure class="highlight code"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">The authenticity <span class="keyword">of</span> host <span class="comment">'github.com (207.97.227.239)' can't be established.</span></div><div class="line">RSA <span class="keyword">key</span> fingerprint <span class="keyword">is</span> <span class="number">16</span>:<span class="number">27</span>:ac:a5:<span class="number">76</span>:<span class="number">28</span>:<span class="number">2</span>d:<span class="number">36</span>:<span class="number">63</span>:<span class="number">1</span>b:<span class="number">56</span>:<span class="number">4</span>d:eb:df:a6:<span class="number">48.</span></div><div class="line">Are you sure you want <span class="keyword">to</span> <span class="keyword">continue</span> connecting (yes/no)?</div></pre></td></tr></table></figure>

<p>输入yes就好，然后会看到：</p>
<figure class="highlight code"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hi cnfeat! You<span class="attribute">'ve</span> successfully authenticated, but GitHub does <span class="keyword">not</span> provide shell <span class="keyword">access</span>.</div></pre></td></tr></table></figure>

<h2 id="设置用户信息">设置用户信息</h2>
<p>这个是为了本地commit代码是来确认用户信息使用</p>
<figure class="highlight code"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --<span class="keyword">global</span> user.name <span class="string">"kanzhe123"</span><span class="comment">//用户名</span></div><div class="line">$ git config --<span class="keyword">global</span> user.email  <span class="string">"kanzhe123@126.com"</span><span class="comment">//填写自己的邮箱</span></div></pre></td></tr></table></figure>

<p><strong>到这里准备工作基本差不多了，下面开始进入正题了</strong></p>
<h1 id="Hexo主题下载、部署及本地测试"><strong>Hexo主题下载、部署及本地测试</strong></h1>
<p>Hexo是一个简单、快速、强大的博客发布工具，支持Markdown格式…有点啰嗦了！！！！！！！</p>
<h2 id="安装Hexo">安装Hexo</h2>
<p>打开git。</p>
<figure class="highlight code"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>npm install -g hexo</div></pre></td></tr></table></figure>

<p>如果npm全局安装的话可以直接Ctrl + R</p>
<figure class="highlight code"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cmd</div><div class="line">npm <span class="operator"><span class="keyword">install</span> -g hexo</span></div></pre></td></tr></table></figure>

<p>成功后hexo -v 查看hexo基本信息</p>
<h2 id="部署hexo">部署hexo</h2>
<p>选择你的project目录，创建hexo文件夹，在该目录下初始化<br>右键 Git Bash。</p>
<figure class="highlight code"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>npm init</div></pre></td></tr></table></figure>

<p>也可以Shift + 右键 右键菜单会出现”此处打开命令窗口”</p>
<figure class="highlight code"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">init</span></div></pre></td></tr></table></figure>

<p>Hexo随后会自动在目标文件夹建立网站所需要的所有文件</p>
<h2 id="本地预览">本地预览</h2>
<p>在创建的hexo文件下执行</p>
<figure class="highlight code"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo generate <span class="javadoc">/** 或者hexo g 执行生成编译**/</span></div><div class="line">$ hexo server <span class="javadoc">/** 或者hexo s 启动本地服务，进行文章预览调试**/</span></div></pre></td></tr></table></figure>

<p>接下来就是鉴证奇迹的时刻了；打开浏览器输入<code>http://localhost:4000/</code><br>如果出来的是代码那就对了，因为没有执行：(‘Hexo一个基于 Node.js 的静态博客程序’)</p>
<figure class="highlight code"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install <span class="javadoc">/** 安装nodejs的依赖包 **/</span></div></pre></td></tr></table></figure>

<p>重新generate再测试，页面华丽展现…</p>
<h2 id="修改Hexo主题">修改Hexo主题</h2>
<p>执行到上一步，站点的雏形已经出来了，但是总得有符合自己气质的主题；hexo init时会只带主题landscape,可以选择自己喜欢的<a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="external">主题</a>,好吧，又啰嗦了…本人使用的是<a href="http://litten.github.io/" target="_blank" rel="external">@litten</a>主题</p>
<p><strong>复制litten主题</strong></p>
<figure class="highlight code"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>git clone <span class="symbol">https:</span>/<span class="regexp">/github.com/litten</span><span class="regexp">/hexo-theme-yilia.git themes/yilia</span></div></pre></td></tr></table></figure>

<p>会在项目的themes目录下新增yilia主题</p>
<p><strong>启用litten的主题</strong><br>修改Hexo目录下的config.yml配置文件中的theme属性，将其设置为yilia。</p>
<figure class="highlight code"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">theme</span>: <span class="string">yilia</span></div></pre></td></tr></table></figure>

<p><code>注意：</code>Hexo有两个_config.yml文件，一个在根目录，一个在theme下，此时修改的是在根目录下的。<br>好了，编译生成再重启本地服务预览，不错吧…</p>
<h1 id="GitHub_托管项目"><strong>GitHub 托管项目</strong></h1>
<p>不能满足于本地查看，show出来大家看看。这里介绍的是GitHub托管，你也可以尝试<a href="https://gitcafe.com/" target="_blank" rel="external">gitcafe</a>,可以参考<a href="http://zipperary.com/2013/11/23/hexo-to-gitcafe/" target="_blank" rel="external">zipperary</a></p>
<p><strong>GitHub上建立Repository</strong><br>登录后系统，在github首页，点击页面右下角「New Repository」<br><img src="http://ww4.sinaimg.cn/large/7bab94ddgw1eo18cmdx1mj20kz076jsc.jpg" alt="New Repository"><br>填写项目信息：<br>project name：kanzhe123.github.io<br>description： Hlwang`s Blog<br>点击「Create Repository」 完成创建。<br>推荐：<a href="http://pchou.info/web-build/2013/01/05/build-github-blog-page-02.html" target="_blank" rel="external">一步步在GitHub上创建博客主页(2)</a></p>
<p><strong>Hexo配置github</strong><br>修改Hexo目录下的config.yml配置文件中的deploy</p>
<figure class="highlight code"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  <span class="class"><span class="keyword">type</span>: <span class="title">github</span></span></div><div class="line">  repository: https:<span class="comment">//github.com/kanzhe123/kanzhe123.github.io.git</span></div><div class="line">  branch: master</div></pre></td></tr></table></figure>

<p>如果你是为一个项目制作网站，那么需要把branch设置为gh-pages。若要绑定自定义域名也可以参考Hexo或Github Page的帮助文档，制作一个cname文件。<br>之后执行下列指令即可完成部署，注意部署会覆盖掉你之前在版本库中存放的文件。</p>
<figure class="highlight code"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo clean  <span class="javadoc">/** 清空public生成文件**/</span></div><div class="line">hexo generate</div><div class="line">hexo deploy</div></pre></td></tr></table></figure>

<p><code>注意：</code>第一次在deploy会很慢，毕竟是访问国外的，将就一下吧<br>看看仓库是不是这样的<br><img src="http://ww1.sinaimg.cn/large/7bab94ddgw1eo18szadj8j20m20cygob.jpg" alt="code_view"><br>还要在本地Hexo s嘛？试试你刚刚部署在github的<a href="kanzhe123.github.io">kanzhe123.github.io</a><br><code>注意：</code>上传之后需要等一会儿，休息一下，喝杯水回来再刷新试试（我当时等了十分钟左右吧）</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="hexo是什么"><strong>hexo是什么</strong></h1>
<p><a href="http://hexo.io/" target="_blank" rel="external">hexo</a>是一个基于<a href="http://nodejs.org/" target="_blank" rel="external">Node.js</a>的静态博客程序，可以方便的生成静态网页托管在<a href="https://github.com/" target="_blank" rel="external">github</a>和<a href="https://www.heroku.com/" target="_blank" rel="external">Heroku</a>上。作者是来自台湾的<a href="https://github.com/hexojs/hexo" target="_blank" rel="external">@tommy351</a>。引用<a href="https://github.com/hexojs/hexo" target="_blank" rel="external">@tommy351</a>的话，hexo：</p>
<blockquote>
<p><strong>快速、简单且功能强大的 Node.js 博客框架。</strong><br>A fast, simple &amp; powerful blog framework, powered by Node.js.</p>
</blockquote>
<p>类似于Octopress、Wordpress，我们可以用<a href="http://hexo.io/" target="_blank" rel="external">hexo</a>创建自己的博客，托管到<a href="https://github.com/" target="_blank" rel="external">github</a>上，然后绑定自己的域名，用<a href="http://mahua.jser.me/" target="_blank" rel="external">markdown</a>写文章。本博客即使用hexo创建并托管在<a href="https://github.com/" target="_blank" rel="external">github</a>上。</p>
]]>
    
    </summary>
    
      <category term="hexo" scheme="http://kanzhe123.github.io/tags/hexo/"/>
    
      <category term="技术类" scheme="http://kanzhe123.github.io/categories/%E6%8A%80%E6%9C%AF%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[心情激动，献上处女作]]></title>
    <link href="http://kanzhe123.github.io/2015/01/06/welcome/"/>
    <id>http://kanzhe123.github.io/2015/01/06/welcome/</id>
    <published>2015-01-06T02:40:53.000Z</published>
    <updated>2015-01-06T07:57:15.791Z</updated>
    <content type="html"><![CDATA[<p>一直有想自己建个自己的博客的<code>雄心</code>，总是没有合适的契机、胆子也小、找不到合适的<code>小苹果</code>…总结一个字：不会搞…<br>昨天，在一个机缘巧合的机会让我看到了<a href="http://litten.github.io/" target="_blank" rel="external">@litten</a>的博客，我靠靠…这不就是我想要的滑板鞋嘛…<br><a id="more"></a><br>下午捣鼓了一下午，研究GitHub(还是不太了解)、了解Hexo（就知道<code>hexo init、hexo generate、hexo server...</code>）、试着使用<a href="http://www.jianshu.com/p/q81RER" target="_blank" rel="external">Markdown</a> N多问题整不明白，还好旁边做了个看起来挺牛逼的家伙<a href="http://yywang.info/" target="_blank" rel="external">@yywang</a>，早晨过来三下五除二你看的Hlwang闪亮登场了,内心还是很激昂的，迫不及待、洋洋洒洒的献出了我的第一次…o(∩_∩)o </p>
<h2 id="关于鄙人">关于鄙人</h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> hlwang = {</div><div class="line">  nickName  : <span class="string">"呆子、黑人..."</span>,</div><div class="line">  birthday : <span class="string">"1990-05-10"</span>,</div><div class="line">  hobby : <span class="string">"篮球"</span></div><div class="line">  e_mail : <span class="string">"kanzhe123@126.com"</span>,</div><div class="line">  site : <span class="string">"http://kanzhe123.github.io/"</span></div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p>一直有想自己建个自己的博客的<code>雄心</code>，总是没有合适的契机、胆子也小、找不到合适的<code>小苹果</code>…总结一个字：不会搞…<br>昨天，在一个机缘巧合的机会让我看到了<a href="http://litten.github.io/" target="_blank" rel="external">@litten</a>的博客，我靠靠…这不就是我想要的滑板鞋嘛…<br>]]>
    
    </summary>
    
      <category term="心情" scheme="http://kanzhe123.github.io/tags/%E5%BF%83%E6%83%85/"/>
    
      <category term="生活类" scheme="http://kanzhe123.github.io/categories/%E7%94%9F%E6%B4%BB%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[心情激动，献上处女作]]></title>
    <link href="http://kanzhe123.github.io/2015/01/06/mysql_note_1/"/>
    <id>http://kanzhe123.github.io/2015/01/06/mysql_note_1/</id>
    <published>2015-01-06T02:40:53.000Z</published>
    <updated>2015-01-06T07:57:15.791Z</updated>
    <content type="html"><![CDATA[<p>一直有想自己建个自己的博客的<code>雄心</code>，总是没有合适的契机、胆子也小、找不到合适的<code>小苹果</code>…总结一个字：不会搞…<br>昨天，在一个机缘巧合的机会让我看到了<a href="http://litten.github.io/" target="_blank" rel="external">@litten</a>的博客，我靠靠…这不就是我想要的滑板鞋嘛…<br><a id="more"></a><br>下午捣鼓了一下午，研究GitHub(还是不太了解)、了解Hexo（就知道<code>hexo init、hexo generate、hexo server...</code>）、试着使用<a href="http://www.jianshu.com/p/q81RER" target="_blank" rel="external">Markdown</a> N多问题整不明白，还好旁边做了个看起来挺牛逼的家伙<a href="http://yywang.info/" target="_blank" rel="external">@yywang</a>，早晨过来三下五除二你看的Hlwang闪亮登场了,内心还是很激昂的，迫不及待、洋洋洒洒的献出了我的第一次…o(∩_∩)o </p>
<h2 id="关于鄙人">关于鄙人</h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> hlwang = {</div><div class="line">  nickName  : <span class="string">"呆子、黑人..."</span>,</div><div class="line">  birthday : <span class="string">"1990-05-10"</span>,</div><div class="line">  hobby : <span class="string">"篮球"</span></div><div class="line">  e_mail : <span class="string">"kanzhe123@126.com"</span>,</div><div class="line">  site : <span class="string">"http://kanzhe123.github.io/"</span></div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p>一直有想自己建个自己的博客的<code>雄心</code>，总是没有合适的契机、胆子也小、找不到合适的<code>小苹果</code>…总结一个字：不会搞…<br>昨天，在一个机缘巧合的机会让我看到了<a href="http://litten.github.io/" target="_blank" rel="external">@litten</a>的博客，我靠靠…这不就是我想要的滑板鞋嘛…<br>]]>
    
    </summary>
    
      <category term="心情" scheme="http://kanzhe123.github.io/tags/%E5%BF%83%E6%83%85/"/>
    
      <category term="生活类" scheme="http://kanzhe123.github.io/categories/%E7%94%9F%E6%B4%BB%E7%B1%BB/"/>
    
  </entry>
  
</feed>
